<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog]]></title>
  <link href="http://wadara.github.io/atom.xml" rel="self"/>
  <link href="http://wadara.github.io/"/>
  <updated>2014-10-16T12:47:23+09:00</updated>
  <id>http://wadara.github.io/</id>
  <author>
    <name><![CDATA[wadara]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intellij]]></title>
    <link href="http://wadara.github.io/blog/2014/05/28/intellij/"/>
    <updated>2014-05-28T14:56:27+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/28/intellij</id>
    <content type="html"><![CDATA[<p>intellij を使う</p>

<p>ショートカット
 * CMD+SHIFT+A   コマンドなどを検索して実行
 * CMD+SHIFT+N   ファイルを検索
 * OPT+ENTER   Quick Fix
 * CTRL+SHIFT+F    プロジェクトから検索</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play]]></title>
    <link href="http://wadara.github.io/blog/2014/05/14/title/"/>
    <updated>2014-05-14T10:43:04+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/14/title</id>
    <content type="html"><![CDATA[<p>play の実習</p>

<ul>
<li>setup おそい</li>
</ul>


<p> <!-- more --></p>

<ul>
<li>template</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@* app/views/index.scala.html *@$
</span><span class='line'>@(message: String)
</span><span class='line'>
</span><span class='line'>@main("Welcome to Play 2.1") {
</span><span class='line'>
</span><span class='line'>    @play20.welcome(message, style = "Java")
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>行頭@(message: String) はテンプレートの引数</p>

<p>@xxx()</p>

<p>で, 別のテンプレートを呼び出せて, @main(.. はmain.scala.html を呼び出す</p>

<p>mainをみると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@(title: String)(content: Html)
</span><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>    &lt;head&gt;
</span><span class='line'>        &lt;title&gt;@title&lt;/title&gt;
</span><span class='line'>        &lt;link rel="stylesheet" media="screen" href="@routes.Assets.at("stylesheets/main.css")"&gt;
</span><span class='line'>        &lt;link rel="shortcut icon" type="image/png" href="@routes.Assets.at("images/favicon.png")"&gt;
</span><span class='line'>        &lt;script src="@routes.Assets.at("javascripts/jquery-1.9.0.min.js")" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>    &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        @content
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ. 引数みると, カリー化された定義になってる</p>

<p>ブロック式{}の中身はHtml 型として評価される ? っていうのが今の理解</p>

<p>ちゃんとドキュメント読んでないけど</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Readable_code]]></title>
    <link href="http://wadara.github.io/blog/2014/05/13/readable-code/"/>
    <updated>2014-05-13T17:48:08+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/13/readable-code</id>
    <content type="html"><![CDATA[<h3>まとめ</h3>

<ul>
<li>命名規則</li>
<li>indent とかブロック整列</li>
<li>コメント</li>
<li>制御文の書き方</li>
<li>変数の使い方</li>
<li>関数に抽出する</li>
<li>テストの書き方</li>
</ul>


<p>簡単に書いてしまうと上みたいなことが, 丁寧に例を用いて説明してある</p>

<ul>
<li>return を早めにして, ネストを少なくする</li>
<li>複雑な条件はドモルガンを使うと簡潔になることも</li>
<li>x = a || b || c</li>
<li>比較演算子は右側によく変わるものをもってくるべき</li>
</ul>


<p>とかテクニック的にすぐ使える話も多い.</p>

<h3>感想</h3>

<p>命名規則でget, set などのメソッドは軽量であるべきとか, 知らなかったのでヤバいな
と思った</p>

<p>テクニック的なことが多くて楽しい.</p>

<p>テストのところもはこれからどんどんテスト書くと思うので, 読んでおいてよかった</p>

<p>なるほどという感じ.</p>

<p>コメントをかかなと思った. 6ヶ月後の自分のため</p>

<p>1~14章までは分かりやすくスラスラ読めたけど, 15章が急に読みにくく感じた</p>

<p>コード読めば分かるけど, 日本語が読みづらいような</p>

<p>例えばConverterQueueのShiftメソッドの説明で,</p>

<pre><code>* 最古の項目はmax_items 以下なら削除する
</code></pre>

<p>という文があるけど, 原文は</p>

<pre><code>* Oldest items will be removed so there are &lt;= max_items.
</code></pre>

<p>となっていて,</p>

<pre><code>* 最古の項目が削除されるので, items数はmax_items以下になる
</code></pre>

<p>と訳すのがあってるきがする.</p>

<p>あとは,</p>

<pre><code>* 最新のnum_buckets の時間に含まれる合計カウントを返す 
</code></pre>

<p>とか分からない</p>

<p>原文は</p>

<pre><code>* Return the total count over the last num_buckets worth of time
</code></pre>

<p>だけど, これは原文みてもよく訳せない..</p>

<p>おわり</p>

<p>一日本読むと眠い</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPAで勉強]]></title>
    <link href="http://wadara.github.io/blog/2014/05/13/title/"/>
    <updated>2014-05-13T11:15:16+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/13/title</id>
    <content type="html"><![CDATA[<p>昨日やったこと</p>

<p>IPA の</p>

<ul>
<li>脆弱性体験ツールやる</li>
<li>安全なウェブサイトの作り方読む</li>
<li>linux 標準教科書読む</li>
</ul>


<h3>脆弱性体験ツールApp Goat &amp; 安全なウェブサイトの作り方</h3>

<ul>
<li>windows しか動かない</li>
<li>脆弱性のある見本サイトを攻撃しながら、攻撃方法を学ぶ事ができる</li>
<li><p>XSS, SQL インジェクション, CSRF 等について学んだ</p></li>
<li><p>XSS</p>

<ul>
<li>出力文字をエスケープする</li>
<li>バリデーションもしましょう</li>
<li>html の入力を許可するサイトは難しい</li>
</ul>
</li>
<li>SQL インジェクション

<ul>
<li>プレースホルダを使う</li>
<li>しかも静的プレースホルだにする</li>
</ul>
</li>
<li>CSRF

<ul>
<li>hidden field 使ってその値が正しい場合のみ処理を実行するようにする</li>
<li>referer のチェック</li>
</ul>
</li>
<li>OSコマンドインジェクション

<ul>
<li>シェルを起動できる言語機能の利用を避ける。</li>
</ul>
</li>
<li>session 管理

<ul>
<li>session id を推測困難にする</li>
<li>url にいれない</li>
</ul>
</li>
</ul>


<p> 上でまとめた以外のこともたくさんある.</p>

<p> サイト作るときはセキュリティのことを常に意識するようにしよう</p>

<h3>linux 標準教科書</h3>

<ul>
<li>知らなかったコマンド

<ul>
<li>uniq, tr, あとsort もほとんど使った事無かった</li>
</ul>
</li>
<li>umask

<ul>
<li>666 から引き算となっていたけど7作りたかったらどうすればいいの</li>
<li>4桁目はSGIDとかsticky bit のためにあるらしいけど使った事無い</li>
<li>参考: <a href="http://osknjgk.myhome.cx/wordpress/?p=41">http://osknjgk.myhome.cx/wordpress/?p=41</a></li>
</ul>
</li>
<li>シェルスクリプト</li>
<li>sh -x でデバッグ実行できる</li>
<li>知らなかった</li>
</ul>


<p>今日はリーダブルコード読んでいます</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿でも分かるgit入門]]></title>
    <link href="http://wadara.github.io/blog/2014/05/09/git/"/>
    <updated>2014-05-09T12:34:59+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/09/git</id>
    <content type="html"><![CDATA[<p>猿でも分かるgit 入門を読みました</p>

<h3>rebase -i 使おうと思った</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase -i HEAD~~</span></code></pre></td></tr></table></div></figure>


<p>でHEADからHEAD~~までのコミットを一気に編集したりまとめたりできる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>edit 4d5415d hoge
</span><span class='line'>pick 04d42bd fuga
</span><span class='line'>squash b83f67a aaa
</span><span class='line'>pick b33f8c2 bbb</span></code></pre></td></tr></table></div></figure>


<p>edit で編集
squash でまとめる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>4d5415d   hoge
</span><span class='line'>04d42bd   fuga
</span><span class='line'>b83f67a   aaa
</span><span class='line'>b33f8c2   !squash fu</span></code></pre></td></tr></table></div></figure>


<p>こんな風に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>b33f8c2   squash! fu</span></code></pre></td></tr></table></div></figure>


<p>コミットコメントに !squash とかいとくと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase -i HEAD~~ --autosquash</span></code></pre></td></tr></table></div></figure>


<p>で</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick     4d5415d   hoge
</span><span class='line'>pick     04d42bd   fuga
</span><span class='line'>squash   b33f8c2   squash! fu
</span><span class='line'>pick     b83f67a   aaa</span></code></pre></td></tr></table></div></figure>


<p>squash! の後ろの文字で前方一致検索して 勝手にsquash してくれる</p>

<h3>~と^ の違い</h3>

<p>よく分かってなかった</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>              A---B---C topic
</span><span class='line'>             /         \
</span><span class='line'>        D---E---F---G---H master</span></code></pre></td></tr></table></div></figure>


<p>HがHEADだとすると,</p>

<ul>
<li>HEAD^   &hellip; G</li>
<li>HEAD^2  &hellip; C</li>
<li>HEAD^2^ &hellip; B</li>
</ul>


<h4>@はreflog をさかのぼる</h4>

<p>使った事無いけどいつか使うかもしれない</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webを支える技術を読んだ]]></title>
    <link href="http://wadara.github.io/blog/2014/05/08/web/"/>
    <updated>2014-05-08T11:23:55+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/08/web</id>
    <content type="html"><![CDATA[<h3>概要</h3>

<p>Restとはなにか.</p>

<p>またweb を構成するURI,HTTP,HTMLといった技術の説明とこれらを用いたrestful なweb
の設計方法について述べられている.</p>

<h3>REST</h3>

<ul>
<li><p>web が成功した理由はREST</p></li>
<li><p>REST = ULCODC$SS</p>

<ul>
<li>Uniform          : インタフェースを固定する</li>
<li>Layered          : システムを階層に分離する</li>
<li>Code on Demand   : プログラムをクライアントにダウンロードして実行する。</li>
<li>Client           : ユーザインタフェースと処理を分離する</li>
<li>Cache            : クライアントとサーバの通信回数と量を減らす</li>
<li>Stateless Server : サーバ側でアプリケーション状態を持たない</li>
</ul>
</li>
</ul>


<p> web サービスを作るときにはこの原則に沿って作るべき</p>

<h3>URI</h3>

<ul>
<li>cool URI</li>
</ul>


<p>cool なURI とは変わらないURI のことである.</p>

<p>またリンク切れ起こしまくるweb はやだし,</p>

<p>システムの実装が変わるたびにURI が変わるような設計はかっこわるい</p>

<p>だめな例としては</p>

<ul>
<li>プログラミング言語に依存した拡張子, パスを含むURI</li>
<li>メソッド名がURIに含まれる</li>
<li>URIにセッションIDが含まれる</li>
</ul>


<p>こんな感じで, とにかくURIはリソースの名前であり, シンプルであるべきだという話だった.</p>

<p>設計のテクニック等も書いてあったので, 実際設計するときは読むべきかとも思った</p>

<p>けどだいたいはフレームワークがやってくれる話だったりする?</p>

<h3>http</h3>

<ul>
<li>http はRest の要素をを実現しているプロトコル</li>
<li>method をきちんと使う</li>
</ul>


<p>httpメソッドのget, post, put, deleteきちんと使い分けできているかという話.</p>

<p>例えばこんな表があるけど,</p>

<table>
<thead>
<tr>
<th> </th>
<th>          </th>
<th> get </th>
<th> post </th>
<th> put </th>
<th> delete </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td> </td>
<td> 安全性   </td>
<td> o   </td>
<td> x    </td>
<td> x   </td>
<td> x      </td>
<td> </td>
</tr>
<tr>
<td> </td>
<td> べき等性 </td>
<td> o   </td>
<td> x    </td>
<td> o   </td>
<td> o      </td>
<td> </td>
</tr>
</tbody>
</table>


<p>このようなメソッドの仕様をみたさないweb サービスやAPI の設計はしないように気をつけるべきです</p>

<p>（put とdelete がべき等でget が安全なメソッドであるとかいうことはhttpの仕様で定められている)</p>

<p>あとはなんでもかんでもpost でやらないようにしようとか.</p>

<ul>
<li>ステータスコードを理解する</li>
</ul>


<p> ステータスコードの意味を理解して, 正しいステータスコードを返す設計にしましょう</p>

<ul>
<li>ヘッダを使う</li>
</ul>


<p>ヘッダ適当にコピペするもの..ではなく考えて使おう.</p>

<p>キャッシュやkeep alive などパフォーマンスに関わるものもあるし, chunk とか認証も大事.</p>

<h3>html</h3>

<ul>
<li>microformats, Atom, JSON</li>
</ul>


<p> 急にAtom 等が出てきた感じがするけど, この辺は紹介html 関連技術の紹介という感じ</p>

<h3>設計</h3>

<p>最後に郵便番号検索サービスを例にとって具体的な設計の進め方の話がされていた</p>

<ul>
<li>URI よく考えること</li>
<li>http メソッドの選定</li>
<li>トランザクション

<ul>
<li>Restfulに実現するにはトランザクションリソースを使う</li>
<li>post で一気にやる</li>
</ul>
</li>
<li>排他制御</li>
<li>リソースの設計</li>
</ul>


<h3>感想</h3>

<p>この本を読んでおけばweb サービスを構成する基本的な要素について理解する事ができて,
あとは作りながらググるっていうことができるようになりそう.</p>

<p>単純に知らない事もいっぱいあって勉強になったし, RESTの思想の歴史的背景などは読んでいておもしろかった.</p>

<p>URIやhttpメソッドのだめな例に当てはまっているweb サイトは世の中いっぱいある..</p>

<p>そういうものを作らないように心がけよう</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twada さんの講演]]></title>
    <link href="http://wadara.github.io/blog/2014/05/07/twada/"/>
    <updated>2014-05-07T22:35:48+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/07/twada</id>
    <content type="html"><![CDATA[<p>エンジニアとしてこの先生きのこるための話</p>

<h3>きのこる本</h3>

<p>きのこる本でも大体半分の人がテストに言及してるのでテストは大事.</p>

<p>なので TDD やりましょうという話が前半</p>

<p>以下箇条書きで覚えていることを</p>

<ul>
<li><p>テストに関する議論はよく炎上する.(dhhの件に触れてた.)</p>

<ul>
<li><p>それはテストの定義がみんなバラバラだから?</p></li>
<li><p>developer test,受け入れ test&hellip;</p></li>
<li><p>TDD は特にdeveloperが安心するため</p></li>
</ul>
</li>
<li><p>TDD サイクル = red green refactor</p>

<ul>
<li>Refactor がなかなかできない. refactor をする時間が取られるプロジェクトはいいプロジェクト</li>
<li>これを黄金の回転で回さないといけない</li>
</ul>
</li>
<li><p>Testで大事なのはrepeatable, independentであること</p>

<ul>
<li>バランスも大事とかいろいろあったけど忘れた</li>
</ul>
</li>
</ul>


<p>後半はエンジニアが一生エンジニアでいるためにはどうするべきかという話</p>

<p>きのこの本18 : 学び続ける姿勢が大事</p>

<ol>
<li> 技術を学ぶのではなく、学び方を学ぶ

<ul>
<li>自分と関連がありそうな事を積極的に触る</li>
<li>好きなものだけやっていてはだめ</li>
<li>technology lader とかgithub で話題のものさがすとか</li>
</ul>
</li>
<li> 英語で学ぶ

<ul>
<li>英語大事</li>
</ul>
</li>
<li> 過去から未来を知る(本を読む)

<ul>
<li>技術の発展は螺旋のようなもので, 繰り返す</li>
<li>繰り返すが過去との差分があるので, 一度経験したものでも再び勉強してみる</li>
<li>老害にならない</li>
</ul>
</li>
<li> blog 等アウトプットをする

<ul>
<li>アウトプットする人のところには情報が集まる</li>
</ul>
</li>
</ol>


<p>本の紹介がいっぱいあった</p>

<ul>
<li>プログラマが知るべき97のこと</li>
<li>sqlアンチパターン</li>
<li>アジャイルサムライ</li>
<li>テスト駆動開発入門</li>
<li>リファクタリング</li>
<li>リーダブルコード</li>
<li>達人プログラマー</li>
<li>clean code</li>
</ul>


<h3>感想</h3>

<p>TDDはQAのためというより, 開発者のためのものだという印象だった.</p>

<p>動くものを作ってリファクタっていうサイクルが大事で、リファクタを安心して行うためにテストがあるよという感じでしょうか.</p>

<p>学び続ける姿勢については、本をとにかく読まなきゃと思った.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[この先生きのこりたいならブログを書け]]></title>
    <link href="http://wadara.github.io/blog/2014/05/07/title/"/>
    <updated>2014-05-07T22:06:48+09:00</updated>
    <id>http://wadara.github.io/blog/2014/05/07/title</id>
    <content type="html"><![CDATA[<p>研修で覚えたことや感想をまとめるためのブログ</p>
]]></content>
  </entry>
  
</feed>
