---
layout: post
title: "webを支える技術を読んだ"
date: 2014-05-08 11:23:55 +0900
comments: true
categories: 
---

###概要

Restとはなにか.

またweb を構成するURI,HTTP,HTMLといった技術の説明とこれらを用いたrestful なweb
の設計方法について述べられている.

###REST

 * web が成功した理由はREST

 * REST = ULCODC$SS
   * Uniform          : インタフェースを固定する
   * Layered          : システムを階層に分離する
   * Code on Demand   : プログラムをクライアントにダウンロードして実行する。
   * Client           : ユーザインタフェースと処理を分離する
   * Cache            : クライアントとサーバの通信回数と量を減らす
   * Stateless Server : サーバ側でアプリケーション状態を持たない

 web サービスを作るときにはこの原則に沿って作るべき

###URI

 * cool URI

cool なURI とは変わらないURI のことである.

またリンク切れ起こしまくるweb はやだし,

システムの実装が変わるたびにURI が変わるような設計はかっこわるい

だめな例としては

 * プログラミング言語に依存した拡張子, パスを含むURI
 * メソッド名がURIに含まれる
 * URIにセッションIDが含まれる

こんな感じで, とにかくURIはリソースの名前であり, シンプルであるべきだという話だった.

設計のテクニック等も書いてあったので, 実際設計するときは読むべきかとも思った

けどだいたいはフレームワークがやってくれる話だったりする?


###http 
 * http はRest の要素をを実現しているプロトコル 
 * method をきちんと使う

httpメソッドのget, post, put, deleteきちんと使い分けできているかという話.

例えばこんな表があるけど,

 |          | get | post | put | delete | 
 |---|
 | 安全性   | o   | x    | x   | x      | 
 | べき等性 | o   | x    | o   | o      | 

このようなメソッドの仕様をみたさないweb サービスやAPI の設計はしないように気をつけるべきです

（put とdelete がべき等でget が安全なメソッドであるとかいうことはhttpの仕様で定められている)
 
あとはなんでもかんでもpost でやらないようにしようとか.

 * ステータスコードを理解する
 
 ステータスコードの意味を理解して, 正しいステータスコードを返す設計にしましょう

 * ヘッダを使う

ヘッダ適当にコピペするもの..ではなく考えて使おう. 

キャッシュやkeep alive などパフォーマンスに関わるものもあるし, chunk とか認証も大事.


###html
 * microformats, Atom, JSON

 急にAtom 等が出てきた感じがするけど, この辺は紹介html 関連技術の紹介という感じ

###設計
最後に郵便番号検索サービスを例にとって具体的な設計の進め方の話がされていた

 * URI よく考えること
 * http メソッドの選定
 * トランザクション
   * Restfulに実現するにはトランザクションリソースを使う
   * post で一気にやる
 * 排他制御
 * リソースの設計 

###感想
この本を読んでおけばweb サービスを構成する基本的な要素について理解する事ができて, 
あとは作りながらググるっていうことができるようになりそう.

単純に知らない事もいっぱいあって勉強になったし, RESTの思想の歴史的背景などは読んでいておもしろかった.

URIやhttpメソッドのだめな例に当てはまっているweb サイトは世の中いっぱいある..

そういうものを作らないように心がけよう

